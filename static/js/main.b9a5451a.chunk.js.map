{"version":3,"sources":["components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/Image/Image.js","components/Footer/index.js","components/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","id","this","props","status","count","topscore","Component","Jumbotron","Image","_this","key","src","data-clicked","clicked","onClick","handleClick","Footer","Container","children","App","state","images","counter","correctGuess","topScore","map","image","setState","updateTopScore","console","log","i","j","temp","length","Math","floor","random","newTopScore","_this2","components_Navbar_Navbar","Jumbotron_Jumbotron","Container_Container","data","components_Image_Image","name","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9a5451a.chunk.js","sourcesContent":["import React,{Component} from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass Navbar extends Component {\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t    <nav className=\"navbar fixed-top bg-warning customNav\">\r\n\t\t\t    <a className=\"navbar-brand\" href=\"#\">ClickyGame</a>\r\n\t\t\t    <h3 id=\"status\">{this.props.status}</h3>\r\n\t\t\t    <h3> Score: {this.props.count} | Top Score: {this.props.topscore}  </h3>\r\n\t\t\t    \r\n\t\t\t </nav>\r\n     )\r\n\t}\r\n}\r\n\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron(){\r\n\treturn (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n\t  <div className=\"container\">\r\n\t    <h1 className=\"display-4 text-center\">React Clicky Game!!</h1>\r\n\t    <p className=\"lead text-center para\">Click an emoticon to begin!</p>\r\n\t  </div>\r\n\t</div>\r\n     )\r\n\r\n\r\n}\r\n\r\nexport default Jumbotron;","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nclass Image extends Component {\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<img className=\"jumbotron jumbotron-fluid imgDisplay img-thumbnail\" key={this.props.id} src={this.props.src} data-clicked={this.props.clicked}  onClick={() => this.props.handleClick(this.props.id)}/>\r\n\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Image;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"container-fluid footer\" >\r\n     <div className=\"footContent\">\r\n        Clicky Game Copyright &copy;\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from \"react\";\r\nimport Image from \"../Image/Image\"\r\nimport \"./style.css\";\r\n\r\n\r\n\r\nfunction Container(props) {\r\n  return (\r\n    <div className=\"position\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Container;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\nimport Image from \"./components/Image/Image\";\nimport Footer from \"./components/Footer\";\nimport images from \"./imageList.json\"\nimport Container from \"./components/Container/Container\";\n\n\n\nclass App extends Component {\n\tstate = {\n    images,\n    counter : 0,\n    status : \"\",\n    correctGuess : 0 ,\n    topScore : 0\n\n  };\n\n  handleClick = id => {\n   \n    const updateImages = this.state.images.map(image => {\n    \tif(image.id === id) {\n    \t\tif(!image.clicked) {\n    \t\t\timage.clicked = true;\n          this.setState({correctGuess : this.state.correctGuess + 1})\n\t    \t\tthis.setState({counter : this.state.counter + 1})\n\t    \t\tthis.setState({status : \"You guessed correctly!\"})\n\t    \t\tconsole.log(\"status\",this.state.status);\n\t    \t\tconsole.log(\"counter\",this.state.counter);\n          this.updateTopScore();\n    \t\t} else if (this.state.correctGuess >= 9){\n          this.setState({status : \"All images clicked!\"})\n          this.updateTopScore();\n\n        } else {\n    \t\t\t\n    \t\t\t// const newTopScore = this.state.topScore < this.state.counter ? this.state.counter: this.state.topScore;\n       //          this.setState({topScore : newTopScore})\n       //          console.log(\"top\",this.state.topScore);\n\t    \t\tthis.setState({counter : 0})\n\t    \t\tthis.setState({status : \"You guessed it wrong!\"})\n          this.updateTopScore();\n    \t}\n      // const newTopScore = this.state.topScore < this.state.counter ? this.state.counter: this.state.topScore;\n      //           this.setState({topScore : newTopScore})\n      //           console.log(\"top\",this.state.topScore);\n\n    }\n}\n);\n\n    \n    const shuffleImages = this.state.images.map(image => {\n    \tlet i,j,temp;\n    \tfor(i=this.state.images.length-1;i>0;i--){\n    \t\tj = Math.floor(Math.random() * (i + 1));\n\t        temp = this.state.images[i];\n\t        this.state.images[i] = this.state.images[j];\n\t        this.state.images[j] = temp;\n    \t}\n\n    }\n    )\n\n    this.setState(images);\n     \n  };\n\n  updateTopScore = () => {\n\n    const newTopScore = this.state.topScore < this.state.counter ? this.state.counter: this.state.topScore;\n              this.setState({topScore : newTopScore})\n              console.log(\"top\",this.state.topScore);\n  }\n\n\n\n  render() {\n  \treturn (\n    \t <div> \n  \t      <Navbar count={this.state.counter} status={this.state.status} topscore={this.state.topScore}/>\n          <Jumbotron />\n          <Container>\n          {this.state.images.map(data => (\n          <Image\n            handleClick={this.handleClick}\n            id={data.id}\n            key={data.id}\n            name={data.name}\n            src={data.src}\n            clicked={data.clicked}\n            />\n          ))}\n            \n            </Container>\n          \n          \n          <Footer/>\n          </div>\n          );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}