{"version":3,"sources":["logo.svg","components/Image/Image.js","components/Container/Container.js","components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Image","props","react_default","a","createElement","className","key","id","src","data-clicked","clicked","onClick","handleClick","Container","state","images","counter","updateImages","_this","map","image","console","log","setState","_this2","this","data","Image_Image","name","Component","Navbar","href","Jumbotron","Footer","App","components_Navbar_Navbar","Jumbotron_Jumbotron","components_Container_Container","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iZAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6OCwDzBC,MA3Cf,SAAeC,GACd,OAEKC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDAAqDC,IAAKL,EAAMM,GAAIC,IAAKP,EAAMO,IAAKC,eAAcR,EAAMS,QAAUC,QAAS,kBAAMV,EAAMW,YAAYX,EAAMM,uBCkE/JM,6MAtEbC,MAAQ,CACNC,SACAC,QAAU,KAGZJ,YAAc,SAAAL,GAGZ,IAAMU,EAAeC,EAAKJ,MAAMC,OAAOI,IAAI,SAAAC,GACvCA,EAAMb,IAAMA,IACda,EAAMV,SAAU,EAChBW,QAAQC,IAAI,UAAUL,MAWxBC,EAAKK,SAAS,CAACP,QAAUE,EAAKJ,MAAME,QAAU,IAC9CE,EAAKK,SAASR,GACdM,QAAQC,IAAI,UAAUJ,EAAKJ,MAAME,kFAe1B,IAAAQ,EAAAC,KACP,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEZoB,KAAKX,MAAMC,OAAOI,IAAI,SAAAO,GAAI,OACzBxB,EAAAC,EAAAC,cAACuB,EAAD,CACEf,YAAaY,EAAKZ,YAClBL,GAAImB,EAAKnB,GACTD,IAAKoB,EAAKnB,GACVqB,KAAMF,EAAKE,KACXpB,IAAKkB,EAAKlB,IACVE,QAASgB,EAAKhB,oBAxDFmB,aCmBTC,mLAdb,OACI5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAe0B,KAAK,KAAjC,UACA7B,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,mCAXeyB,aCYNG,MAbf,WACC,OACG9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,mBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,kGCKU4B,MAVf,WACE,OACE/B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0BACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,sCCkDU6B,MAzCf,WACE,OAGOhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC+B,EAAD,MACCjC,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAACiC,EAAD,MAGAnC,EAAAC,EAAAC,cAACkC,EAAD,QCbUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bcd46e73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n// import images from \"./imageList.json\"\r\n// import img1 from \"../../images/img1.png\"\r\n// //import img15 from \"../../images/img15.png\"\r\n// import img2 from \"../../images/img2.png\"\r\n// // import img5 from \"../../images/img5.jpg\"\r\n// // import img6 from \"../../images/img6.jpg\"\r\n// import img15 from \"../../images/img15.png\"\r\n// import clipart from \"../../images/clipart-burger.png\"\r\n// import img7 from \"../../images/img7.png\"\r\n\r\nimport \"./style.css\";\r\n\r\nfunction Image(props){\r\n\treturn (\r\n        \t\r\n      <img className=\"jumbotron jumbotron-fluid imgDisplay img-thumbnail\" key={props.id} src={props.src} data-clicked={props.clicked}  onClick={() => props.handleClick(props.id)}/>\r\n      \r\n      )\r\n}\r\n\r\n// let imageSrc = [img1,img2,img15,img7];\r\n// class Image extends Component{\r\n\r\n// \tstate = {\r\n// \t\timages\r\n\r\n// \t};\r\n\r\n// \thandleClick = (event) => {\r\n//         //define target as key\r\n//         //const targetKey = event.target.dataset.clicked;\r\n//         const target = this.state.clicked;\r\n//         console.log(\"target\",target)\r\n//         alert(event.target.dataset.clicked);\r\n        \r\n        \r\n//         // define value for key\r\n// \t\t//this.setState({target.clicked : true})\r\n// \t\tthis.setState({clicked: true})\r\n\t\t\r\n// \t\tconsole.log('The link was clicked.');\r\n// \t}\r\n// \trender() {\r\n// \t return (\r\n//       this.state.images.map((data,idx) =>\r\n   \t\r\n//       <img className=\"jumbotron jumbotron-fluid imgDisplay img-thumbnail\" key={idx} src={data} data-clicked={this.state.clicked} onClick={this.handleClick}/>\r\n//       )\r\n//       )\r\n\r\n\r\n// \t}\r\n// }\r\n\r\n\r\nexport default Image;","import React, { Component } from \"react\";\r\nimport Image from \"../Image/Image\"\r\nimport \"./style.css\";\r\nimport images from \"../../imageList.json\"\r\n//import img1 from \"../../images/img1.png\"\r\n\r\nclass Container extends Component {\r\n  // Setting this.state.friends to the friends json array\r\n  //same as friends : friends\r\n  //when defining object properties with ES6, \r\n  //if the object's key and value have the same name, \r\n  //we can omit the colon â€” this is just an optional shorthand syntax.\r\n  state = {\r\n    images,\r\n    counter : 1 \r\n  };\r\n\r\n  handleClick = id => {\r\n    // Filter this.state.friends for friends with an id not equal to the id being removed\r\n    //We include only friends with an id property not equal to the id being received into this method. \r\n    const updateImages = this.state.images.map(image => {\r\n    \tif(image.id == id){\r\n    \t\timage.clicked = true;\r\n    \t\tconsole.log(\"updated\",updateImages)\r\n    \t}\r\n    \t// alert(id + \"is clicked\")\r\n     //   console.log(this.state.images);\r\n     //   console.log(\"images\",images);\r\n     //   console.log(id);\r\n      //this.setState(images);;\r\n\r\n    }\r\n    \r\n    \t);\r\n    this.setState({counter : this.state.counter + 1})\r\n    this.setState(images);\r\n    console.log(\"Counter\",this.state.counter);\r\n\r\n    // Set this.state.friends equal to the new friends array\r\n    //when we update our component's state by removing one of the friend objects, our component re-renders itself.\r\n    //this.setState({ images });\r\n       \r\n  };\r\n\r\n  // Map over this.state.friends and render a FriendCard component for each friend object\r\n  //whenever we map over a list of data and return JSX, \r\n  //React wants us to give each element a unique key prop. React uses this value internally to help it efficiently render \r\n  //and re-render components from arrays of data.\r\n\r\n  //the key prop is unusual because it's used by React but \r\n  //isn't actually available for us to use inside of the component we pass it to. We pass the friend id in as a separate prop because we'll need it inside of the FriendCard component.\r\n  render() {\r\n    return (\r\n      <div className=\"position\">\r\n       \r\n        {this.state.images.map(data => (\r\n          <Image\r\n            handleClick={this.handleClick}\r\n            id={data.id}\r\n            key={data.id}\r\n            name={data.name}\r\n            src={data.src}\r\n            clicked={data.clicked}\r\n            />\r\n          ))}\r\n         </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// function Container() {\r\n//   return (\r\n//     <div className=\"position\">\r\n//       <Image/>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default Container;","import React,{Component} from \"react\";\r\n//import \"./style.css\";\r\nimport Container from \"../Container/Container\"\r\n\r\nclass Navbar extends Component {\r\n\r\n\tstate : {\r\n\t\tscore: 0\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t    <nav className=\"navbar navbar-dark bg-primary\">\r\n\t\t    <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n\t\t    <h2> Score: </h2>\r\n\t\t    <h2> Top Score:  </h2>\r\n\t\t     \r\n\t\t\t</nav>\r\n     )\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\nexport default Navbar;","import React from \"react\";\r\n//import \"./style.css\";\r\n\r\nfunction Jumbotron(){\r\n\treturn (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n\t  <div className=\"container\">\r\n\t    <h1 className=\"display-4\">Fluid jumbotron</h1>\r\n\t    <p className=\"lead\">This is a modified jumbotron that occupies the entire horizontal space of its parent.</p>\r\n\t  </div>\r\n\t</div>\r\n     )\r\n\r\n\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"container-fluid footer\" >\r\n     <div className=\"footContent\">\r\n        Clicky Game Copyright &copy;\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\nimport Image from \"./components/Image/Image\";\n//import img1 from \"./images/img1.jpg\"\nimport Footer from \"./components/Footer\";\n\nimport Container from \"./components/Container/Container\";\n//import \"./images\"\nimport './App.css';\n\n//console.log(img1);\n\n\nfunction App(){\n  return (\n\n  \t // <img className=\"jumbotron jumbotron-fluid\" src={img1}/>\n  \t      <div> \n  \t      <Navbar/>\n          <Jumbotron/>\n          <Container/>\n          \n          \n          <Footer/>\n          </div>\n\n  \t)\n}\n\n// class App extends Component {\n//   render() {\n//     return (\n\n\n//       // <div className=\"App\">\n//       //   <header className=\"App-header\">\n//       //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//       //     <p>\n//       //       Edit <code>src/App.js</code> and save to reload.\n//       //     </p>\n//       //     <a\n//       //       className=\"App-link\"\n//       //       href=\"https://reactjs.org\"\n//       //       target=\"_blank\"\n//       //       rel=\"noopener noreferrer\"\n//       //     >\n//       //       Learn React\n//       //     </a>\n//       //   </header>\n//       // </div>\n//     );\n//   }\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}